@page "/fetchchardata"

<PageTitle>Character Data</PageTitle>

@using SWNBlazorApp.Data
@using SWNUniverseGenerator
@using SWNUniverseGenerator.DefaultSettings
@using SWNUniverseGenerator.Models
@inject CharacterService CharacterService
@inject UniverseService UniverseService
@inject Universe CurrentUniverse

<h1>Character Data</h1>

<p>All characters in the current universe</p>

@if (characters == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudGrid>
        <MudItem xs="8">
            <MudTable Items="@characters" Hover="true" SortLabel="Sort By" Filter="new Func<Character, bool>(CharacterFilterFunc)" @bind-SelectedItem="currentCharacter">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Character List</MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Character, object>(x => x.Id)">ID</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Character, object>(x => x.Name)">Name</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Character, object>(x => x.Title)">Title</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Character, object>(x => x.ShipId)">Ship ID</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Ship Id">@context.ShipId</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new[] {10, 15, 20, 25, 50, 75, 100, int.MaxValue}"/>
                </PagerContent>
            </MudTable>
        </MudItem>

        <MudItem xs="4">
            @*Individual Character Display*@
            @if (currentCharacter != null)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@currentCharacter.Name</MudText>
                            <MudText Typo="Typo.body2">@currentCharacter.Id</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body1">@currentCharacter.Title</MudText>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    </MudGrid>
}

@code {
    private List<Character>? characters;
    private Character currentCharacter;
    private string searchString;

    protected override async Task OnInitializedAsync()
    {
        CurrentUniverse = UniverseService.GetUniverseAsync().Result;
        characters = await CharacterService.GetCharactersAsync(CurrentUniverse);
    }

    private void SetCurrentCharacter(Character character)
    {
        currentCharacter = character;
    }

    private String GetPlanetName(String planetId)
    {
        string[] array = {planetId};
        return Search.SearchUniverseList(UniverseService.GetUniverseAsync().Result, new SearchDefaultSettings() {Id = array}).First().Name;
    }

    private String GetShipname(String shipId)
    {
        string[] array = {shipId};
        return Search.SearchUniverseList(UniverseService.GetUniverseAsync().Result, new SearchDefaultSettings() {Id = array}).First().Name;
    }

    private bool CharacterFilterFunc(Character character) => CharacterFilter(character, searchString);

    private bool CharacterFilter(Character character, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (character.Name.Contains(this.searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (character.Id.Contains(this.searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}