@page "/planets"

<PageTitle>Planets</PageTitle>

@using SWNBlazorApp.Data
@using SWNUniverseGenerator.DefaultSettings
@using SWNUniverseGenerator.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SWNUniverseGenerator.CreationTools

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UniverseService UniverseService
@inject Universe CurrentUniverse
@inject PlanetService PlanetService
@inject StarService StarService

<h1>Planet List</h1>

<p>All planets in @CurrentUniverse.Name</p>


@if (planets == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudGrid>
        <MudItem xs="8">
            <MudTable Items="@planets.OrderBy(c => c.Id)" Hover="true" SortLabel="Sort By" Filter="new Func<Planet, bool>(PlanetFilterFunc)" @bind-SelectedItem="currentPlanet">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Planet List</MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Planet, object>(x => x.Name)">Planet</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Planet, object>(x => x.Population)">Population</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Planet, object>(x => GetCityCount(x.Id))">Cities</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Planet, object>(x => GetTechLevel(x.TechLevel).Type)">Tech Level</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Planet?, object>(x => GetStarName(x.ZoneId))">Star</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        Grid Location
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name" class="cursor-pointer">@context.Name</MudTd>
                    <MudTd DataLabel="Pop" class="cursor-pointer">@context.Population.ToString("##,###")</MudTd>
                    <MudTd DataLabel="Cities" class="cursor-pointer">
                        @GetCityCount(context.Id)
                    </MudTd>
                    <MudTd DataLabel="TechLevel" class="cursor-pointer">
                        @(GetTechLevel(context.TechLevel).Type)
                    </MudTd>
                    <MudTd DataLabel="Grid" class="cursor-pointer">
                        @(GetStarName(context.ZoneId))
                    </MudTd>
                    <MudTd DataLabel="Grid" class="cursor-pointer">
                        @(GetZone(context.ZoneId).X 
                          + "/" 
                          + GetZone(context.ZoneId).Y)
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new[] {10, 15, 20, 25, 50, 75, 100, int.MaxValue}"/>
                </PagerContent>
            </MudTable>
        </MudItem>

        <MudItem xs="4">
            @*Individual Star Display*@
            @if (currentPlanet != null)
            {
                <MudTabs>
                    <MudTabPanel Text="Planet">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h4">@currentPlanet.Name</MudText>
                                    <MudText Typo="Typo.body2">ID: @currentPlanet.Id</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>

                            </MudCardContent>
                        </MudCard>
                    </MudTabPanel>
                    <MudTabPanel Text="POI" Disabled="@(GetPOICount(currentPlanet.Id) == 0)">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText>Points of Interest around <strong>@currentPlanet.Name</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@GetPOIs(currentPlanet.Id)" Context="poiContext" Hover="true" Breakpoint="Breakpoint.Sm">
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Type</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="POIName" class="cursor-pointer">@poiContext.Name</MudTd>
                                        <MudTd DataLabel="Type" class="cursor-pointer">@poiContext.Type</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </MudTabPanel>
                    <MudTabPanel Text="Cities" Disabled="@(GetCityCount(currentPlanet.Id) == 0)">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText>Cities on <strong>@currentPlanet.Name</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@GetCities(currentPlanet.Id)" Context="cityContext" Hover="true" Breakpoint="Breakpoint.Sm">
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Population</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="CityName" class="cursor-pointer">@cityContext.Name</MudTd>
                                        <MudTd DataLabel="Pop" class="cursor-pointer">@cityContext.Population.ToString("##,###")</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </MudTabPanel>
                </MudTabs>
            }
        </MudItem>
    </MudGrid>
}

@code {
    private List<Planet>? planets;
    private Planet currentPlanet;
    private string searchString;
    private bool _isAdmin = false;
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        var universeId = await ProtectedSessionStore.GetAsync<string>("SelectedUniverse");
        if (!string.IsNullOrEmpty(universeId.Value))
        {
            Task<Universe> task = UniverseService.GetUniverseAsync(universeId.Value);
            CurrentUniverse = UniverseService.GetUniverseAsync(universeId.Value).Result;
            planets = await PlanetService.GetPlanetsAsync(universeId.Value);
        }
    }


    private TechLevel GetTechLevel(string techLevelId)
    {
        var result = PlanetService.GetPlanetTechLevel(techLevelId).Result;
        return result;
    }

    private String GetStarName(String zoneId)
    {
        var result = StarService.GetStarByZoneAsync(zoneId).Result;
        return StarService.GetStarAsync(result.Id).Result.Name;
    }

    private Zone GetZone(string zoneId)
    {
        return StarService.GetZoneAsync(zoneId).Result;
    }

    private int GetPOICount(string planetID)
    {
        return PlanetService.GetPOICountAsync(planetID).Result;
    }


    private int GetCityCount(string planetID)
    {
        return PlanetService.GetCityCountAsync(planetID).Result;
    }

    private List<PointOfInterest> GetPOIs(string planetID)
    {
        return PlanetService.GetPOIsByStarAsync(planetID).Result;
    }

    private List<City> GetCities(string planetID)
    {
        return PlanetService.GetCitiesbyPlanetAsync(planetID).Result;
    }

    private bool PlanetFilterFunc(Planet planet) => PlanetFilter(planet, searchString);

    private bool PlanetFilter(Planet planet, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (planet.Name.Contains(this.searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (planet.Id.Contains(this.searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}