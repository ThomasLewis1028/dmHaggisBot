@page "/ships"

<PageTitle>Ship Data</PageTitle>

@using SWNBlazorApp.Data
@using SWNUniverseGenerator.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MudBlazor.Extensions

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UniverseService UniverseService
@inject Universe CurrentUniverse
@inject PlanetService PlanetService
@inject StarService StarService
@inject ShipService ShipService
@inject ZoneService ZoneService
@inject CrewMemberService CrewMemberService
@inject CharacterService CharacterService

<h1>Ship Data</h1>

<p>All ships in the @universeName universe</p>

@if (ships == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudGrid>
        <MudItem xs="12">
        </MudItem>
        @* Ship List *@
        <MudItem xs="8">
            <MudTable T="Ship" Items="@ships.OrderBy(c => c.Id)" Hover="true" SortLabel="Sort By" Filter="new Func<Ship, bool>(ShipFilterFunc)" OnRowClick="RowClickEvent" Breakpoint="Breakpoint.Sm">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Ship List</MudText>
                    <MudSpacer/>
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Ship, object>(x => x.Name)">Name</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Ship, object>(x => x.HullId)">Class</MudTableSortLabel>
                    </MudTh>
                    <MudTh>

                        <MudTableSortLabel SortBy="new Func<Ship, object>(x => x.HullId)">Hull</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        Crew Count
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Ship, object>(x => x.Cp)">Combat Power</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<Ship, object>(x => x.CrewSkill)">Crew Skill</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        Location
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name" class="cursor-pointer">@context.Name</MudTd>
                    <MudTd DataLabel="Class" class="cursor-pointer">@GetClass(context.HullId)</MudTd>
                    <MudTd DataLabel="Hull" class="cursor-pointer">@GetHull(context.HullId)</MudTd>
                    <MudTd DataLabel="CrewCount" class="cursor-pointer">@GetCrewCount(context.Id)</MudTd>
                    <MudTd DataLabel="CombatPower" class="cursor-pointer">@context.Cp</MudTd>
                    <MudTd DataLabel="ScrewSkill" class="cursor-pointer">@context.CrewSkill</MudTd>
                    <MudTd DataLabel="Location" class="cursor-pointer">
                        <MudIcon Icon="@GetLocationType(context.LocationId).icon" Color="@GetLocationType(context.LocationId).color"/> @GetLocationName(@context.LocationId)
                    </MudTd>
                </RowTemplate>
                @* Crew Member Sub Table *@
                <ChildRowContent>
                    @if (context == currentShip && GetCrewCount(context.Id) > 0)
                    {
                        <MudTr>
                            <td colspan="5">
                                <MudCard Elevation="0" Outlined="true">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText>Crew Members on <strong>@context.Name</strong></MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent Class="pa-0">
                                        <MudTable Items="@GetCrewMembers(currentShip.Id)" Context="characterContext" Hover="true" Breakpoint="Breakpoint.Sm">
                                            <HeaderContent>
                                                <MudTh>Title</MudTh>
                                                <MudTh>Name</MudTh>
                                                <MudTh>Gender</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="CharTitle" class="cursor-pointer">@GetCharacter(characterContext.CharacterId).Title</MudTd>
                                                <MudTd DataLabel="CharTitle" class="cursor-pointer">@GetCharacter(characterContext.CharacterId).Name</MudTd>
                                                <MudTd DataLabel="CharTitle" class="cursor-pointer">@GetCharacter(characterContext.CharacterId).Gender</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudCardContent>
                                </MudCard>
                            </td>
                        </MudTr>
                    }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new[] { 10, 15, 20, 25, 50, 75, 100, int.MaxValue }"/>
                </PagerContent>
            </MudTable>
        </MudItem>

        <MudItem xs="4">
            @*Individual Ship Display*@
            @if (currentShip != null)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@currentShip.Name</MudText>
                            <MudText Typo="Typo.body2">@currentShip.Id</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @* @if(currentCharacter.Title != null) *@
                        @* { *@
                        @*     <MudText Typo="Typo.body1">Title: @currentCharacter.Title</MudText> *@
                        @* } *@
                        @* <MudText Typo="Typo.body1">Gender: @currentCharacter.Gender</MudText> *@
                        @* <MudText Typo="Typo.body1">Skin Color: @currentCharacter.SkinCol</MudText> *@
                        @* <MudText Typo="Typo.body1">Hair Style: @currentCharacter.HairStyle</MudText> *@
                        @* <MudText Typo="Typo.body1">Hair Color: @currentCharacter.HairCol</MudText> *@
                        @* <MudText Typo="Typo.body1">Eye Color: @currentCharacter.EyeCol</MudText> *@
                        @* <MudText Typo="Typo.body1">Height: @currentCharacter.Height</MudText> *@
                        @* <MudText Typo="Typo.body1">Ship: @GetShipName(currentCharacter.Id)</MudText> *@
                        @* <MudText Typo="Typo.body1">Birth Planet: @GetPlanetName(@currentCharacter.BirthPlanetId)</MudText> *@
                        @* <MudText Typo="Typo.body1">Current Planet: @GetPlanetName(@currentCharacter.CurrentLocationId)</MudText> *@
                        @* <MudText Typo="Typo.body1">Initial Reaction: @currentCharacter.InitialReaction</MudText> *@
                        @* <MudText Typo="Typo.body1">Crime Chance: @currentCharacter.CrimeChance%</MudText> *@

                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    </MudGrid>
}

@code {
    private List<Character>? characters;
    private List<Ship>? ships;
    private Ship currentShip;
    private string searchString;
    String universeName;
    MudForm form;


    protected override async Task OnInitializedAsync()
    {
        var universeId = await ProtectedSessionStore.GetAsync<string>("SelectedUniverse");
        if (!string.IsNullOrEmpty(universeId.Value))
        {
            Task<Universe> task = UniverseService.GetUniverseAsync(universeId.Value);
            universeName = task.Result == null ? "None" : task.Result.Name;
            CurrentUniverse = UniverseService.GetUniverseAsync(universeId.Value).Result;
            ships = await ShipService.GetShipsAsync(universeId.Value);
        }
    }

    private (String icon, Color color) GetLocationType(string locId)
    {
        switch (locId)
        {
            case var _ when locId.StartsWith("P-"): return (Icons.Material.Filled.Public, Color.Success);

            case var _ when locId.StartsWith("SH-"):
                if (ships != null) return (Icons.Material.Filled.Rocket, Color.Info);
                break;
            case var _ when locId.StartsWith("S-"): return (Icons.Material.Filled.BrightnessHigh, Color.Warning);
            case var _ when locId.StartsWith("SC-"): return (Icons.Material.Filled.Hexagon, Color.Primary);
            default: return (Icons.Material.Filled.Info, Color.Error);
        }

        return (null, Color.Default)!;
    }

    private void RowClickEvent(TableRowClickEventArgs<Ship> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item == null)
            return;
        if (currentShip != tableRowClickEventArgs.Item)
        {
            currentShip = tableRowClickEventArgs.Item;
        }
        else
        {
            currentShip = null;
        }
    }

    private string GetLocationName(string locId)
    {
        switch (locId)
        {
            case var _ when locId.StartsWith("P-"): return GetPlanetName(locId);
            case var _ when locId.StartsWith("SH-"):
                if (ships != null) return ships.First(sh => sh.Id == locId).Name;
                break;
            case var _ when locId.StartsWith("S-"): return GetStarName(locId);
            case var _ when locId.StartsWith("SC-"): return GetZoneCoords(locId);
            default: return locId;
        }

        return "";
    }

    private String GetZoneCoords(string zoneId)
    {
        var result = ZoneService.GetZoneAsync(zoneId);
        return "X:" + result.Result.X + " - Y:" + result.Result.Y;
    }

    private String GetPlanetName(String planetId)
    {
        return PlanetService.GetPlanetAsync(planetId).Result.Name;
    }

    private String GetStarName(String starId)
    {
        return StarService.GetStarAsync(starId).Result.Name;
    }

    private int GetCrewCount(string shipId)
    {
        return CrewMemberService.GetCrewMemberCount(shipId).Result;
    }

    private List<CrewMember> GetCrewMembers(string shipId)
    {
        return CrewMemberService.GetCrewMembersAsync(shipId).Result;
    }

    private Character GetCharacter(string charId)
    {
        return CharacterService.GetCharacterAsync(charId).Result;
    }

    private string GetHull(string hullId)
    {
        return ShipService.GetShipHull(hullId).Result.HullType.ToDescriptionString();
    }


    private string GetClass(string hullId)
    {
        return ShipService.GetShipHull(hullId).Result.HullClass.ToDescriptionString();
    }

    private void CreateShip()
    {
        //TODO: Fix
        // Universe universe = UniverseService.GetUniverseAsync().Result;
        //
        // creation.CreateCharacter(universe, new CharacterDefaultSettings()
        // {
        //     First = newCharFirstName,
        //     Last = newCharLastName,
        //     Gender = newCharGender,
        //     Age = new[] {newCharAge, newCharAge},
        //     HairStyle = newCharHairStyle,
        //     HairCol = newCharHairColor,
        //     EyeCol = newCharEyeColor,
        //     Title = newCharTitle,
        //     Count = 1,
        //     CrimeChance = new[] {newCharCrimeChance, newCharCrimeChance},
        //     ShipId = newCharShipId
        // });
        // OnInitializedAsync();
    }

    private bool ShipFilterFunc(Ship ship) => ShipFilter(ship, searchString);

    private bool ShipFilter(Ship ship, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (ship.Name.Contains(this.searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ship.Id.Contains(this.searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}