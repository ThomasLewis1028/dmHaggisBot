@page "/universes"
@using SWNBlazorApp.Data
@using SWNUniverseGenerator.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SWNUniverseGenerator.CreationTools
@using SWNUniverseGenerator.DefaultSettings


<PageTitle>Universes</PageTitle>

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UniverseService UniverseService
@inject IMenuService MenuService
@inject IDialogService DialogService

<h1>Universes</h1>

<MudText Typo="Typo.h5">Current Universe: @universeName</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-Errors="@errors">
                <MudGrid>
                    <MudItem xs="8">
                        <MudTextField T="String" Label="Universe Name" Required="false" @bind-Value="universeName"/>
                    </MudItem>
                    <MudItem xs="2">
                        <MudTextField T="int" Label="Grid X" @bind-Value="gridX"></MudTextField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudTextField T="int" Label="Grid Y" @bind-Value="gridY"></MudTextField>
                    </MudItem>

                    <MudItem xs="4">
                        <MudCheckBox T="bool" Label="Overwrite Existing Universe?" @bind-Checked="overwrite"/>
                    </MudItem>
                    <MudItem xs="4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => CreateUniverse())">Create Universe</MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12">
        <MudTable Items="@universes" Hover="true" SortLabel="Sort By" @bind-SelectedItem="selectedUniverse">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Universe List</MudText>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Universe, object>(x => x.Name)">Universe Name</MudTableSortLabel>
                </MudTh>
                <MudTh>Grid Size</MudTh>
                <MudTh>Star Count</MudTh>
                <MudTh>Planet Count</MudTh>
                <MudTh>Ship Count</MudTh>
                <MudTh>Character Count</MudTh>
                <MudTh>Load Universe</MudTh>
                <MudTh>Delete Universe</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Grid">@($"{context.GridX}/{context.GridY}")</MudTd>
                <MudTd DataLabel="StarCount">@GetStarCount(context.Id)</MudTd>
                <MudTd DataLabel="PlanetCount">@GetPlanetCount(context.Id)</MudTd>
                <MudTd DataLabel="ShipCount">@GetShipCount(context.Id)</MudTd>
                <MudTd DataLabel="CharCount">@GetCharCount(context.Id)</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => LoadUniverse(context.Id))">Load</MudButton>
                </MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteUniverse(context.Id, context.Name))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@if (_createdNew)
{
    <p role="status">Universe Created in @((_end - _start).TotalMilliseconds)ms</p>
}

@code {
    private bool _createdNew;
    private bool overwrite;
    private DateTime _start;
    private DateTime _end;
    private int gridX = 8;
    private int gridY = 10;
    MudForm form;
    String[] errors = { };
    String universeName = "None";
    String searchString;
    Universe selectedUniverse;
    List<Universe> universes = new();


    protected override async Task OnInitializedAsync()
    {
        var universeId = await ProtectedSessionStore.GetAsync<string>("SelectedUniverse");
        if (!string.IsNullOrEmpty(universeId.Value))
        {
            Task<Universe> task = UniverseService.GetUniverseAsync(universeId.Value);
            universeName = task.Result.Name;
        }
        
        universes = await UniverseService.GetUniverseListAsync();
        StateHasChanged();
        MenuService.NotifyChanged();
    }

    private int GetPlanetCount(string universeId)
    {
        return UniverseService.GetPlanetCount(universeId).Result;
    }

    private int GetStarCount(string universeId)
    {
        return UniverseService.GetStarCount(universeId).Result;
    }

    private int GetShipCount(string universeId)
    {
        return UniverseService.GetShipCount(universeId).Result;
    }

    private int GetCharCount(string universeId)
    {
        return UniverseService.GetCharCount(universeId).Result;
    }

    private async void CreateUniverse()
    {
        _start = DateTime.Now;
        //TODO: fix
        Creation creation = new Creation();
        UniverseDefaultSettings uds = new UniverseDefaultSettings()
        {
            UniverseId = new Universe().Id,
            Name = universeName
        };

        await creation.CreateFullUniverse(universeDefaultSettings: uds);

        LoadUniverse(uds.UniverseId);

        _end = DateTime.Now;
        _createdNew = true;
        
        StateHasChanged();
        MenuService.NotifyChanged();
        await OnInitializedAsync();
    }


    private async void LoadUniverse(String universeId)
    {
        Task<Universe> task = UniverseService.GetUniverseAsync(universeId);
        universeName = task.Result == null ? "None" : task.Result.Name;
        await ProtectedSessionStore.SetAsync("SelectedUniverse", universeId);
        
        StateHasChanged();
        MenuService.NotifyChanged();
        await OnInitializedAsync();
    }

    private async void DeleteUniverse(String universeId, String universeName)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "You are about to delete universe " + universeName + ".\nThis action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result != true)
        {
            return;
        }
        
        await UniverseService.DeleteUniverseAsync(universeId);
        StateHasChanged();
        await OnInitializedAsync();
    }

}