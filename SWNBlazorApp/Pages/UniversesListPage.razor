@page "/universes"
@using SWNBlazorApp.Data
@using SWNUniverseGenerator.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SWNUniverseGenerator.CreationTools
@using SWNUniverseGenerator.DefaultSettings


<PageTitle>Universes</PageTitle>

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UniverseService UniverseService
@inject IMenuService MenuService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<h1>Universes</h1>

<MudText Typo="Typo.h5">Current Universe: @_universeName</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Universe Creation">
                <MudPaper Class="pa-4">
                    <MudForm @ref="_form" @bind-Errors="@_errors">
                        <MudGrid>
                            <MudItem xs="8">
                                <MudTextField T="String" Label="Universe Name" Required="false" @bind-Value="_newUniverseName"/>
                            </MudItem>
                            <MudItem xs="2">
                                <MudTextField T="int" Label="Grid X" @bind-Value="_newGridX"></MudTextField>
                            </MudItem>
                            <MudItem xs="2">
                                <MudTextField T="int" Label="Grid Y" @bind-Value="_newGridY"></MudTextField>
                            </MudItem>

                            <MudItem xs="4">
                                <MudCheckBox T="bool" Label="Overwrite Existing Universe?" @bind-Checked="_overwrite"/>
                            </MudItem>
                            <MudItem xs="4">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => FireCreation())">Create Universe</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudPaper>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({_errors.Length})")</MudText>
            @foreach (var error in _errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12">
        <MudTable Items="@_universes" Hover="true" SortLabel="Sort By" @bind-SelectedItem="_selectedUniverse">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Universe List</MudText>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Universe, object>(x => x.Name)">Universe Name</MudTableSortLabel>
                </MudTh>
                <MudTh>Grid Size</MudTh>
                <MudTh>Star Count</MudTh>
                <MudTh>Planet Count</MudTh>
                <MudTh>Ship Count</MudTh>
                <MudTh>Character Count</MudTh>
                <MudTh>POI Count</MudTh>
                <MudTh>Load Universe</MudTh>
                <MudTh>Delete Universe</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Grid">@($"{context.GridX}/{context.GridY}")</MudTd>
                <MudTd DataLabel="StarCount">@GetStarCount(context.Id)</MudTd>
                <MudTd DataLabel="PlanetCount">@GetPlanetCount(context.Id)</MudTd>
                <MudTd DataLabel="ShipCount">@GetShipCount(context.Id)</MudTd>
                <MudTd DataLabel="CharCount">@GetCharCount(context.Id)</MudTd>
                <MudTd DataLabel="POICount">@GetPOICount(context.Id)</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => LoadUniverse(context.Id))">Load</MudButton>
                </MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteUniverse(context.Id, context.Name))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@* Loading *@
<MudDialog @bind-IsVisible="_creationLoading" Options="null">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Build"/> Creating New Universe
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Please wait @_newUniverseName is being created...</MudText>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    </DialogContent>
</MudDialog>

@code {
    private bool _overwrite;
    private DateTime _start;
    private DateTime _end;
    private TimeSpan _totalTime;
    private int _newGridX = 8;
    private int _newGridY = 10;
    MudForm _form;
    String[] _errors = { };
    string _universeName = "None";
    string _newUniverseName;
    String _searchString;
    Universe _selectedUniverse;
    List<Universe> _universes = new();
    bool _creationLoading;
    void OpenLoadingModal() => _creationLoading = true;
    void CloseLoadingModal() => _creationLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var universeId = await ProtectedSessionStore.GetAsync<string>("SelectedUniverse");
        if (!string.IsNullOrEmpty(universeId.Value))
        {
            Task<Universe> task = UniverseService.GetUniverseAsync(universeId.Value);
            _universeName = task.Result.Name;
        }

        _universes = await UniverseService.GetUniverseListAsync();
        StateHasChanged();
        MenuService.NotifyChanged();
    }

    private int GetPlanetCount(string universeId)
    {
        return UniverseService.GetPlanetCount(universeId).Result;
    }

    private int GetStarCount(string universeId)
    {
        return UniverseService.GetStarCount(universeId).Result;
    }

    private int GetShipCount(string universeId)
    {
        return UniverseService.GetShipCount(universeId).Result;
    }

    private int GetCharCount(string universeId)
    {
        return UniverseService.GetCharCount(universeId).Result;
    }
    
    private int GetPOICount(string universeId)
    {
        return UniverseService.GetPOICount(universeId).Result;
    }

    private void FireCreation()
    {
        OpenLoadingModal();
        
        _ = CreateUniverse();
        
        CloseLoadingModal();
    }

    private async Task CreateUniverse()
    {
        _start = DateTime.Now;
        UniverseDefaultSettings uds = new UniverseDefaultSettings()
        {
            UniverseId = new Universe().Id,
            Name = _newUniverseName
        };
        
        var result = await UniverseService.CreateUniverse(uds);
        
        if (result)
        {
            _end = DateTime.Now;
            _totalTime = _end - _start;
        
            Snackbar.Add($"{_newUniverseName} created in {_totalTime.Seconds} seconds", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Failed to create {_newUniverseName} ", Severity.Error);
        }
        
        LoadUniverse(uds.UniverseId);

        StateHasChanged();
        MenuService.NotifyChanged();
        await OnInitializedAsync();
    }


    private async void LoadUniverse(String universeId)
    {
        Task<Universe> task = UniverseService.GetUniverseAsync(universeId);
        _universeName = task.Result == null ? "None" : task.Result.Name;
        await ProtectedSessionStore.SetAsync("SelectedUniverse", universeId);

        Snackbar.Add($"{_universeName} loaded", Severity.Success);

        StateHasChanged();
        MenuService.NotifyChanged();
        await OnInitializedAsync();
    }

    private async void DeleteUniverse(String universeId, String universeName)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "You are about to delete universe " + universeName + ".\nThis action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result != true)
        {
            Snackbar.Add($"Failed to delete {universeName}", Severity.Error);
            return;
        }

        Snackbar.Add($"{universeName} deleted", Severity.Success);

        await UniverseService.DeleteUniverseAsync(universeId);
        StateHasChanged();
        await OnInitializedAsync();
    }

}