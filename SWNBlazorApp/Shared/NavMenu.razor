@using SWNBlazorApp.Data
@using SWNUniverseGenerator.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@implements IDisposable

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UniverseService UniverseService
@inject IMenuService MenuService


<MudDrawer Open="true" Anchor="Anchor.Start" Width="250px" Height="100%" Class="py-3" Elevation="0" Variant="DrawerVariant.Persistent">
    <MudNavMenu Bordered="true" Class="mud-width-full" Rounded="true" Color="Color.Success" >
        <MudText Typo="Typo.h6" Class="px-4">Nav Menu</MudText>
        @if (!string.IsNullOrEmpty(_universeName))
        {
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@_universeName</MudText>
        }
        <MudDivider Class="my-2"/>
        <MudNavLink Href="/universes" Icon="@Icons.Material.Filled.SpaceDashboard">Universes</MudNavLink>

        @if (!string.IsNullOrEmpty(_universeName))
        {
            <MudNavGroup Title="Universe" Icon="@Icons.Material.Filled.Hive" @bind-Expanded=_open>
                <MudNavLink Href="/universe" Icon="@Icons.Material.Filled.Map">Star Map</MudNavLink>
                <MudNavLink Href="/stars" Icon="@Icons.Material.Filled.BrightnessHigh">Stars</MudNavLink>
                <MudNavLink Href="/planets" Icon="@Icons.Material.Filled.Public">Planets</MudNavLink>
                <MudNavLink Href="/characters" Icon="@Icons.Material.Filled.Groups2">Characters</MudNavLink>
                <MudNavLink Href="/ships" Icon="@Icons.Material.Filled.Rocket">Ships</MudNavLink>
            </MudNavGroup>
        }

    </MudNavMenu>
</MudDrawer>

@code {
    private bool _collapseNavMenu = true;
    private bool _open = true;
    private string _universeName = "";
    private string _universeId = "";

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var universeId = await ProtectedSessionStore.GetAsync<string>("SelectedUniverse");

        if (!string.IsNullOrEmpty(universeId.Value))
        {
            Task<Universe> task = UniverseService.GetUniverseAsync(universeId.Value);
            _universeName = task.Result.Name;
            _universeId = task.Result.Id;
        }
    }

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        MenuService.OnChanged += MenuChanged;
        StateHasChanged();
        _ = ReloadNavMenu();
    }

    private async Task ReloadNavMenu()
    {
        await OnAfterRenderAsync(false);
    } 

    void IDisposable.Dispose()
    {
        MenuService.OnChanged -= MenuChanged;
    }

    private void MenuChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
        _ = ReloadNavMenu();
    }
}