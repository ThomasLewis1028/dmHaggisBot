@using SWNBlazorApp.Data
@using SWNUniverseGenerator.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UniverseService UniverseService
@inject Universe CurrentUniverse
@inject IMenuService MenuService


<MudDrawer Open="true" Anchor="Anchor.Start" Width="250px" Height="100%" Class="py-3" Elevation="0" Variant="DrawerVariant.Persistent">
    <MudNavMenu Bordered="true" Class="mud-width-full" Rounded="true" Color="Color.Success">
        <MudText Typo="Typo.h6" Class="px-4">Nav Menu</MudText>
        @if (CurrentUniverse.Name != "" || !string.IsNullOrEmpty(CurrentUniverse.Name))
        {
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@CurrentUniverse.Name</MudText>
        }
        <MudDivider Class="my-2"/>
        <MudNavLink Href="/universes" Icon="@Icons.Material.Filled.SpaceDashboard">Universes</MudNavLink>
        @if (CurrentUniverse.Name != "" || !string.IsNullOrEmpty(CurrentUniverse.Name))
        {
            <MudNavGroup Title="@CurrentUniverse.Name" Icon="@Icons.Material.Filled.Hive">
                <MudNavLink Href="/universe" Icon="@Icons.Material.Filled.Map">Star Map</MudNavLink>
                <MudNavLink Href="/stars" Icon="@Icons.Material.Filled.BrightnessHigh">Stars</MudNavLink>
                <MudNavLink Href="/planets" Icon="@Icons.Material.Filled.Public">Planets</MudNavLink>
                <MudNavLink Href="/characters" Icon="@Icons.Material.Filled.Groups2">Characters</MudNavLink>
                <MudNavLink Href="/ships" Icon="@Icons.Material.Filled.Rocket">Ships</MudNavLink>
            </MudNavGroup>
        }
    </MudNavMenu>
</MudDrawer>

@code {
    private bool collapseNavMenu = true;
    private bool open = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var universeId = await ProtectedSessionStore.GetAsync<string>("SelectedUniverse");
        if (!string.IsNullOrEmpty(universeId.Value))
        {
            Task<Universe> task = UniverseService.GetUniverseAsync(universeId.Value);
            CurrentUniverse = UniverseService.GetUniverseAsync(universeId.Value).Result;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task MenuChanged(EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
        await OnAfterRenderAsync(true);
    }

}