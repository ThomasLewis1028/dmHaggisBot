@using SWNBlazorApp.Data
@using SWNUniverseGenerator.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UniverseService UniverseService
@inject IMenuService MenuService


<MudPaper Width="250px" Class="py-3" Elevation="0">
    <MudNavMenu Bordered="true" Class="mud-width-full">
        <MudText Typo="Typo.h6" Class="px-4">Nav Menu</MudText>
        @if(universeName != "" || !string.IsNullOrEmpty(universeName))
        {
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@universeName</MudText>
        }
        <MudDivider Class="my-2"/>
        <MudNavLink Href="/universes"><MudIcon Icon="@Icons.Material.Filled.Workspaces"/>  Universes</MudNavLink>
        @if (universeName != "" || !string.IsNullOrEmpty(universeName))
        {
            <MudNavGroup Title="@universeName">
                <MudNavLink Href="/universe"><MudIcon Icon="@Icons.Material.Filled.Map"/> Star Map</MudNavLink>
                <MudNavLink Href="/stars"><MudIcon Icon="@Icons.Material.Filled.BrightnessHigh"/> Star List</MudNavLink>
                <MudNavLink Href="/characters"><MudIcon Icon="@Icons.Material.Filled.Person"/> Character List</MudNavLink>
                <MudNavLink Href="/ships"><MudIcon Icon="@Icons.Material.Filled.Rocket"/> Ship List</MudNavLink>
            </MudNavGroup>
        }
    </MudNavMenu>
</MudPaper>

@code {
    private bool collapseNavMenu = true;
    String universeName;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var universeID = await ProtectedSessionStore.GetAsync<string>("SelectedUniverse");
        if (!string.IsNullOrEmpty(universeID.Value))
        {
            universeName = UniverseService.GetUniverseAsync(universeID.Value).Result.Name;
        }
    }

    private bool IsUniverseLoaded()
    {
        return !string.IsNullOrEmpty(universeName);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task MenuChanged(EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
        await OnAfterRenderAsync(true);
    }

}